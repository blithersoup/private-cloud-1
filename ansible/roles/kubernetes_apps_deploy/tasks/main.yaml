- name: Set full path for cloned repository
  ansible.builtin.set_fact:
    cloned_repo_path: "{{ private_cloud_repo_dest_base }}/private-cloud-1"

- name: Clone private-cloud-1 repo if not already present
  ansible.builtin.git:
    repo: "{{ private_cloud_repo_url }}"
    dest: "{{ cloned_repo_path }}"
    version: "{{ private_cloud_repo_version }}"
    update: yes
  become: false

- name: Ensure gpu-operator namespace exists
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: gpu-operator
    state: present

- name: Apply NVIDIA timeslice config
  kubernetes.core.k8s:
    state: present
    namespace: gpu-operator
    src: "{{ cloned_repo_path }}/{{ nvidia_timeslice_config_path }}"

- name: Add/Update Helm repositories
  community.kubernetes.helm_repository:
    name: "{{ item.name }}"
    repo_url: "{{ item.url }}"
    state: present
  loop: "{{ helm_repos }}"

- name: Update all Helm repos once (after adding/updating)
  ansible.builtin.command: helm repo update
  changed_when: false

- name: Install/Upgrade Cilium via Helm chart
  community.kubernetes.helm:
    name: cilium
    chart_ref: cilium/cilium
    chart_version: "{{ cilium_chart_version }}"
    release_namespace: kube-system
    values:
      k8sServiceHost: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      k8sServicePort: 6443
      cluster:
        name: private-cloud
        id: 1
      ipam:
        mode: cluster-pool
        operator:
          clusterPoolIPv4PodCIDRList: "10.42.0.0/16"
      hubble:
        enabled: true
        relay:
          enabled: true
        ui:
          enabled: true
      routingMode: native
      kubeProxyReplacement: true
      socketLB:
        hostNamespaceOnly: true
      enableIPv4Masquerade: true
      ipv4NativeRoutingCIDR: "10.42.0.0/16"
      ipMasqAgent:
        enabled: false
      bpf:
        masquerade: true
        hostLegacyRouting: true
      autoDirectNodeRoutes: true
    state: present
    wait: true
    timeout: "10m"

- name: Install/Upgrade GPU Operator with values file
  community.kubernetes.helm:
    name: gpu-operator
    chart_ref: nvidia/gpu-operator
    chart_version: "{{ gpu_operator_chart_version }}"
    release_namespace: gpu-operator
    create_namespace: false
    values_files:
      - "{{ cloned_repo_path }}/{{ gpu_operator_values_path }}"
    wait: true
    timeout: "10m"
    state: present

- name: Install/Upgrade Tailscale Operator via Helm chart
  community.kubernetes.helm:
    name: tailscale-operator
    chart_ref: tailscale/tailscale-operator
    chart_version: "{{ tailscale_operator_chart_version }}"
    release_namespace: tailscale
    create_namespace: true
    state: present
    values:
      oauth:
        clientId: "{{ tailscale_client_id }}"
        clientSecret: "{{ tailscale_client_secret }}"
    wait: true
    timeout: "5m"

- name: Check if all Cilium pods are ready
  command: kubectl -n kube-system get daemonset cilium -o json
  register: cilium_status
  changed_when: false
  until: >
    (cilium_status.stdout | from_json).status.desiredNumberScheduled ==
    (cilium_status.stdout | from_json).status.numberReady
  retries: 30
  delay: 10

- name: Install/Upgrade Argo CD with values file # could not get helm builtin to work here
  ansible.builtin.shell:
    cmd: >
      helm upgrade --install argocd argo/argo-cd \
        --wait \
        --namespace argocd \
        --create-namespace \
        -f {{ cloned_repo_path }}/{{ argocd_values_path }}

- name: Get Argo CD initial admin secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: argocd
    name: argocd-initial-admin-secret
  register: argocd_secret_info
  retries: 10
  delay: 15

- name: Extract and decode Argo CD admin password
  ansible.builtin.set_fact:
    argocd_admin_password_value: "{{ argocd_secret_info.resources[0].data.password | b64decode }}"
  when: argocd_secret_info.resources is defined and argocd_secret_info.resources | length > 0

- name: Show Argo CD admin password (for setup only)
  ansible.builtin.debug:
    msg: "Argo CD admin password is: {{ argocd_admin_password_value }}"
  when: argocd_admin_password_value is defined and argocd_admin_password_debug

- name: Apply Argo CD Application manifest
  kubernetes.core.k8s:
    state: present
    namespace: argocd
    src: "{{ cloned_repo_path }}/{{ argocd_application_manifest_path }}"